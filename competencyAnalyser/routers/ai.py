from fastapi import APIRouter
from openai import OpenAI

from competencyAnalyser.config import API_KEY


router = APIRouter()
client = OpenAI(api_key=API_KEY)


def ai_exec(questions: list, competencies: list, answers: list):
    file_path = '/home/rvz/examples.txt'
    with open(file_path, 'r') as file:
        examples = file.read()

    arr_string = [
        f'Отталкиваясь от вопроса и ответа на него кандидата ниже, оцени его {competencies[i]}: Вопрос: {questions[i]} Ответ кандидата: {answers[i]}.'
        for i in range(len(questions))]

    string = ""
    for i in arr_string:
        string += i
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Ты система, оценивающая компетенции человека \
        по шкале от 1 до 5 в зависимости от его ответов на представленные вопросы, \
        и предоставляющая вакансии, которые подходят этому кандидату. \
        По вопросам ниже тебе нужно оценить адаптируемость, \
        амбициозность, введение переговоров, инициативность и ответственность. \
        Оценки тебе нужно вывести в стобик (каждую с новой строки) без лишних \
        подробностей (только название компетенции и оценку от 1 до 5). \
        Твой ответ должен содержать только компетенцию и оценку от 1 до 5, без объяснений и подробностей."},
            {"role": "user", "content": string},
            {"role": "assistant", "content": examples},
            {"role": "system", "content": "Ты система подбирающая кандидату вкансии в соответствии с его оценками по компетенциям. Тебе нужно выбрать вакансии, для которых у кандидата \
        все компетенции строго численно больше или равны тем, которые указаны в вакансии"},
            {"role": "user", "content": "После этого в соответствие оценкам компетенций, которые ты дал \
        кандидату по его ответам, выбери, какие вакансии подходят кандидату. Тебе нужно выбрать вакансии, для которых у кандидата \
        все компетенции строго численно больше или равны тем, которые указаны в вакансии. Твой ответ должен содержать только список из оценок компетенций и список из названий вакансий."},
            {"role": "assistant", "content": [{"type": "text", "text": "Список вакансий и нужных значений компетенций  \
        для них: сисадмин, нужная адаптируемость 2+, нужная амбициозность 2+; водитель Виктора, нужная адаптируемости 2+, нужная амбициозность 1+, \
        ; секретарь Влада, нужная адаптируемость 1+, \
        нужная амбициозность 1+;  программист, \
        нужная адаптируемость 1+, нужная амбициозность 4+"},
                                              {"type": "text", "text": '''
        Пример того, как тебе надо подбирать вакансии:

        у кандидата следующие оценки по компетенциям:

        Компетенция1: 5
        Компетенция2: 3
        Компетенция3: 4
        Компетенция4: 3
        Компетенция5: 4

        вакансия тренер в школе с нужными оценками по компетенциям: нужная компетенция1 2+, нужная компетенция2 2+, нужная компетенция3 1+, \
        нужная компетенция4 2+, нужная компетенция5 4+; подходит кандидату, потому что оценки по всем компетенциям у него выше или равны нужным

        вакансия ученый с нужными оценками по компетенциям: нужная компетенция1 3+, нужная компетенция2 2+, нужная компетенция3 2+, \
        нужная компетенция4 3+, нужная компетенция5 5+; ему не подходит, потому что по компетенции компетенция1 у кандидата оценка 4, \
        а для вакансии нужна 5, хоть и по остальным компетенциям у него достаточные оценки. На этих примерах ты видишь, как нужно подбирать \
        вакансии для кандидата, то есть если оценки по всем компетенциям в вакансии меньше или равны оценкам за компетенции у кандидата, \
        ты выбираешь его, но если хотя бы одна не соответсвует(выше по оценке, чем у кандидата, ты его не берешь). У кандидата может быть разное количество компетенций,не обязательно 5 как в примере выше.
        '''}]},
        ],
        temperature=0.7,
    )

    return {response.choices[0].message.content}


# @router.get("/competencies/generate", response_model=List[schemas.CompetencyOut])
async def competencies_generate(vacancies_list):
    # competencies_list = db.query(models.Competency.title).all()
    # print(competencies_list)
    competencies_list = []
    with open("competencyAnalyser/parsing/texts/to_parse.txt", 'r', encoding="utf-8") as file:
        examples = file.read()
        chunk = examples.split('&')
        for i in chunk:
            competencies_list.append(i.split("=")[0])

    client = OpenAI()
    response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "Ты система, подбирающая компетенции \
        для оценки человеку отталкиваясь от вакансий, которые он выбрал. \
        Ты должна выбрать 5 самых подходящих компетенций из представленного тебе списка. \
        Твой ответ должен содержать только спиок компетенций без подробностей. Формат вывода такой: \
        [компетенция1,компетенция2,компетенция3,компетенция4,компетенция5] без квадратных кавычек."},
            {"role": "user", "content": f"Вакансии выбранные пользователем: {vacancies_list}"},
            {"role": "assistant", "content": f"Список всех компетенций: {' '.join(competencies_list)}"}
        ],
        temperature=0.7
    )

    return str(response.choices[0].message.content)
    #
    # content_dict = {'content': response.choices[0].message.content}
    #
    # # Преобразование словаря в строку JSON
    # content_json = json.dumps(content_dict, ensure_ascii=False)
    # # print(content_json)
    # return content_json
